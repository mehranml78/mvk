{"version":3,"sources":["Layouts/Layout2/Layout2.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["NavbarPage","React","lazy","Section","Service","About","Feature","Counter","Clients","GetInTouch","Subscribe","Footer","routes","path","component","props","scrollNavigation","document","documentElement","scrollTop","state","pos","setState","navClass","imglight","Loader","id","className","navItems","idnm","navheading","window","addEventListener","this","console","log","removeEventListener","Fragment","fallback","isLight","Component","App","map","route","idx","key","withRouter","Boolean","location","hostname","match","app","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0QAEMA,EAAaC,IAAMC,MAAK,kBAAM,wDAC9BC,EAAUF,IAAMC,MAAK,kBAAM,iCAC3BE,EAAUH,IAAMC,MAAK,kBAAM,kCAC3BG,EAAQJ,IAAMC,MAAK,kBAAM,kCACzBI,EAAUL,IAAMC,MAAK,kBAAM,iCAC3BK,EAAUN,IAAMC,MAAK,kBAAM,wDAC3BM,EAAUP,IAAMC,MAAK,kBAAM,wDAC3BO,EAAaR,IAAMC,MAAK,kBAAM,+DAC9BQ,EAAYT,IAAMC,MAAK,kBAAM,iCAC7BS,EAASV,IAAMC,MAAK,kBAAM,kCCLjBU,EAJA,CACb,CAAEC,KAAM,IAAKC,U,kDDYX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0BVC,iBAAmB,WACAC,SAASC,gBAAgBC,UACzB,EAAKC,MAAMC,IACtB,EAAKC,SAAS,CAAEC,SAAU,0BAA2BC,UAAU,IAG/D,EAAKF,SAAS,CAAEC,SAAU,eAAgBC,UAAU,KAjCzC,EAqCnBC,OAAS,WACL,OACI,yBAAKC,GAAG,aACJ,yBAAKA,GAAG,UACJ,yBAAKC,UAAU,WACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,aAzC/B,EAAKP,MAAQ,CACTQ,SAAU,CACN,CAAEF,GAAI,EAAGG,KAAM,OAAQC,WAAY,QACnC,CAAEJ,GAAI,EAAGG,KAAM,WAAYC,WAAY,YACvC,CAAEJ,GAAI,EAAGG,KAAM,QAASC,WAAY,SACpC,CAAEJ,GAAI,EAAGG,KAAM,WAAYC,WAAY,YACvC,CAAEJ,GAAI,EAAGG,KAAM,UAAWC,WAAY,YAE1CT,IAAKJ,SAASC,gBAAgBC,UAC9BK,UAAU,EACVD,SAAU,gBAZC,E,gEAiBfQ,OAAOC,iBAAiB,SAAUC,KAAKjB,kBAAkB,GACzDkB,QAAQC,IAAI,UAAYlB,SAASC,gBAAgBC,a,6CAIjDY,OAAOK,oBAAoB,SAAUH,KAAKjB,kBAAkB,GAC5DkB,QAAQC,IAAI,UAAYlB,SAASC,gBAAgBC,a,+BA4BjD,OACI,kBAAC,IAAMkB,SAAP,KACI,kBAAC,WAAD,CAAUC,SAAUL,KAAKR,UAGrB,kBAACzB,EAAD,CAAY4B,SAAUK,KAAKb,MAAMQ,SAAUL,SAAUU,KAAKb,MAAMG,SAAUC,SAAUS,KAAKb,MAAMI,SAAUe,SAAS,IAGlH,kBAACpC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,MAGA,kBAACC,EAAD,Y,GApFE6B,e,cEEhBC,G,oEACJ,WAAY1B,GAAO,IAAD,8BAChB,cAAMA,IACDK,MAAQ,GAFG,E,qDAKZ,OACE,kBAAC,IAAMiB,SAAP,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGzB,EAAO8B,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,IAAD,CAAO/B,KAAM8B,EAAM9B,KAAMC,UAAW6B,EAAM7B,UAAW+B,IAAKD,c,GAXxDJ,cAoBDM,cAAWL,GCxBRM,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCbN,IAAMC,EACJ,kBAAC,IAAD,KACE,kBAAC,EAAD,OAGJC,IAASC,OAAOF,EAAKlC,SAASqC,eAAe,SDyHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.770b8e4e.chunk.js","sourcesContent":["import React, { Component, Suspense } from 'react';\r\n\r\nconst NavbarPage = React.lazy(() => import('../../components/Navbar/Navbar_Page'));\r\nconst Section = React.lazy(() => import('./Section'));\r\nconst Service = React.lazy(() => import('../../components/Service/service'));\r\nconst About = React.lazy(() => import('../../components/About/about'));\r\nconst Feature = React.lazy(() => import('../../components/Features/feature'));\r\nconst Counter = React.lazy(() => import('../../components/Counter/counter'));\r\nconst Clients = React.lazy(() => import('../../components/Clients/Clients'));\r\nconst GetInTouch = React.lazy(() => import('../../components/GetInTouch/GetInTouch'));\r\nconst Subscribe = React.lazy(() => import('../../components/Subscribe/Subscribe'));\r\nconst Footer = React.lazy(() => import('../../components/Footer/footer'));\r\n\r\n\r\nclass Layout2 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            navItems: [\r\n                { id: 1, idnm: \"home\", navheading: \"Home\" },\r\n                { id: 2, idnm: \"services\", navheading: \"Services\" },\r\n                { id: 3, idnm: \"about\", navheading: \"About\" },\r\n                { id: 4, idnm: \"features\", navheading: \"Features\" },\r\n                { id: 5, idnm: \"clients\", navheading: \"Clients\" },\r\n            ],\r\n            pos: document.documentElement.scrollTop,\r\n            imglight: true,\r\n            navClass: \"navbar-light\"\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener(\"scroll\", this.scrollNavigation, true);\r\n        console.log(\" mount \" + document.documentElement.scrollTop,);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.scrollNavigation, true);\r\n        console.log(\"Unmount\" + document.documentElement.scrollTop,);\r\n\r\n    }\r\n\r\n    scrollNavigation = () => {\r\n        var scrollup = document.documentElement.scrollTop;\r\n        if (scrollup > this.state.pos) {\r\n            this.setState({ navClass: \"navbar-light nav-sticky\", imglight: false });\r\n        }\r\n        else {\r\n            this.setState({ navClass: \"navbar-light\", imglight: true });\r\n        }\r\n    };\r\n\r\n    Loader = () => {\r\n        return (\r\n            <div id=\"preloader\">\r\n                <div id=\"status\">\r\n                    <div className=\"spinner\">\r\n                        <div className=\"dot1\"></div>\r\n                        <div className=\"dot2\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Suspense fallback={this.Loader()} >\r\n\r\n                    {/* Importing Navbar */}\r\n                    <NavbarPage navItems={this.state.navItems} navClass={this.state.navClass} imglight={this.state.imglight} isLight={true} />\r\n\r\n                    {/* Importing section */}\r\n                    <Section />\r\n\r\n                    {/* Importing service */}\r\n                    <Service />\r\n\r\n                    {/* Importing about us */}\r\n                    <About />\r\n\r\n                    {/* Importing feature */}\r\n                    <Feature />\r\n\r\n                    {/* Importing counter */}\r\n                    <Counter />\r\n\r\n                    {/* Importing clients */}\r\n                    <Clients />\r\n\r\n                    {/* Importing get in touch */}\r\n                    <GetInTouch />\r\n\r\n                    {/* Importing subscribe */}\r\n                    <Subscribe />\r\n\r\n                    {/* Importing footer */}\r\n                    <Footer />\r\n                </Suspense>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout2;","import Layout2 from \"./Layouts/Layout2/Layout2\";\r\n\r\nconst routes = [\r\n  { path: \"/\", component: Layout2 },\r\n];\r\n\r\nexport default routes;\r\n","import React, { Component } from \"react\";\nimport routes from \"./routes\";\nimport {\n  withRouter,\n  Route,\n  Switch,\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\n// Import Scss\nimport \"./theme.scss\";\n\n//Import Icon Css\nimport \"./assets/css/materialdesignicons.min.css\";\nimport \"./assets/css/pe-icon-7.css\";\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n  }\n    render() {\n        return (\n          <React.Fragment>\n          <Router>\n            <Switch>\n              {routes.map((route, idx) => (\n                <Route path={route.path} component={route.component} key={idx} />\n              ))}\n            </Switch>\n          </Router>\n        </React.Fragment>\n      );\n    }\n  }\n  \n  export default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\nReactDOM.render(app, document.getElementById(\"root\"));\nserviceWorker.unregister();"],"sourceRoot":""}